// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String @id @default(cuid())
  name           String?
  email          String         @unique
  emailVerified  DateTime?      @map("email_verified")
  hashedPassword String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  posts          Post[]
  favoritePosts  FavoritePost[] // キャメルケースに変更
  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                String @id @default(cuid())
  userId            String     @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? // キャメルケースに変更
  accessToken       String? // キャメルケースに変更
  expiresAt         Int?    @map("expires_at")
  tokenType         String? // キャメルケースに変更
  scope             String?
  idToken           String? // キャメルケースに変更
  sessionState      String? // キャメルケースに変更

  user User @relation(fields: [userId], references: [id])

  @@map("accounts")
}

model Session {
  id           String @id @default(cuid())
  userId       String      @map("user_id")
  expires      DateTime
  sessionToken String   @unique // キャメルケースに変更
  accessToken  String   @unique // キャメルケースに変更
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model Post {
  id            String @id @default(cuid())
  title         String?
  body          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String? // キャメルケースに統一
  user          User?          @relation(fields: [userId], references: [id])
  favoritePosts FavoritePost[] // キャメルケースに変更

  @@map("posts")
}

model FavoritePost {
  id        String @id @default(cuid())
  userId    String? // キャメルケースに統一
  postId    String? // キャメルケースに統一
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
  @@map("favorite_posts")
}
